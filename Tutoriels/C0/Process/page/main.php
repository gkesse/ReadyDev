<div class="Parallax GParallax1"><div class="Img Binary"><div class="Caption"><a href="#"><div class="Text">Gérer les processus en C</div></a></div></div><div class="Body2 Orange">Le but de ce tutoriel est de vous apprendre à gérer les processus en <b>C</b>.<br>Produit par <b>Gérard KESSE</b>.<br><br><div class="Content0 GSummary1"><div class="Body0" id="Loader_1529412976174"><div class="Row26">Summary 1</div></div><script>loadSummary1("Loader_1529412976174");</script></div></div></div><br><div class="Content2 GTitle1"><div class="MainBlock2"><div class="Content"><h1 class="Title2 Center" id="Introduction"><a class="Link3" href="#">Introduction</a></h1><div class="Body3">Un ordinateur équipé d'un système d'exploitation multitâches est capable d'exécuter plusieurs processus de façon quasi simultanée.Un <b>processus </b>est un programme en cours d'exécution par un ordinateur.<br><br><div class="Img3 GImage"><img src="/data/img/defaults/banner_c_process.png" alt="/data/img/defaults/banner_c_process.png"></div><br><h2 class="Title7 GTitle2" id="Introduction-Prérequis"><a class="Link9" href="#Introduction">Prérequis</a></h2><br>$\checkmark$ Apprendre la programmation en C<br><br></div></div></div></div><br><div class="Content2 GTitle1"><div class="MainBlock2"><div class="Content"><h1 class="Title2 Center" id="Identifier un processus"><a class="Link3" href="#">Identifier un processus</a></h1><div class="Body3">Identification d'un processus.<br><br><div class="Content0 GSummary2"><div class="Body0" id="Loader_1594470327347"><div class="Row26">Summary 2</div></div><script>loadSummary2("Loader_1594470327347");</script></div><br><h2 class="Title7 GTitle2" id="Identifier un processus-Comprendre le PID"><a class="Link9" href="#Identifier un processus">Comprendre le PID</a></h2><br>Le PID est l'identifiant par lequel on caractérise un processus. C'est un nombre entier unique associé à chaque processus en cours d'exécution. <br><br><h2 class="Title7 GTitle2" id="Identifier un processus-Récupérer le PID d'un processus"><a class="Link9" href="#Identifier un processus">Récupérer le PID d'un processus</a></h2><br>L'identification d'un processus se fait par l'appel de la fonction <b>getpid</b>. L'appel à cette fonction permet de récupérer le PID du processus appelant.<br><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="c_cpp">//===============================================
static void GTestSysUnix_Pid(int argc, char** argv) {
    GDebug()-&gt;Write(2, 3, __FUNCTION__, 3, "()", _EOA_);
    pid_t lPid = getpid();
    GDebug()-&gt;Write(2, 3, "lPid : ", 1, (int)lPid, _EOA_);
}
//===============================================</xmp></pre></div><br><h2 class="Title7 GTitle2" id="Identifier un processus-Résultat"><a class="Link9" href="#Identifier un processus">Résultat</a></h2><br><div class="Img3 GImage"><img src="img/getpid.png" alt="img/getpid.png"></div><br></div></div></div></div><br><div class="Content2 GTitle1"><div class="MainBlock2"><div class="Content"><h1 class="Title2 Center" id="Dupliquer un processus"><a class="Link3" href="#">Dupliquer un processus</a></h1><div class="Body3">Duplication d'un processus.<br><br><div class="Content0 GSummary2"><div class="Body0" id="Loader_1594466985250"><div class="Row26">Summary 2</div></div><script>loadSummary2("Loader_1594466985250");</script></div><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Le principe de la duplication"><a class="Link9" href="#Dupliquer un processus">Le principe de la duplication</a></h2><br>La duplication de processus se fait par l'appel de la fonction <b>fork</b>. À chaque appel de cette fonction, le processus appelant est dupliqué. C'est une façon simple d'apporter du parallélisme au sein d'une application avec la présence de 2 processus, un processus parent et un processus fils. Cette fonction retourne 0 quand il s'agit du processus fils et retourne un nombre différent de 0 quand il s'agit du processus père. Dans le dernier cas le nombre retourné est le PID du processus fils. Cela permet au processus parent d'avoir directement connaissance du PID du processus fils.<br><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Identifier le processus parent"><a class="Link9" href="#Dupliquer un processus">Identifier le processus parent</a></h2><br>L'identification du processus parent se fait par l'appel de la fonction <b>getppid</b>. L'appel cette fonction permet au processus appelant de connaître le PID de son processus parent.<br><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Synchroniser le père et le fils"><a class="Link9" href="#Dupliquer un processus">Synchroniser le père et le fils</a></h2><br>La synchronisation entre le processus père et le processus fils se fait par l'appel de la fonction <b>wait</b>. L'appel à cette fonction permet au processus parent d'attendre la fin de l'exécution du processus fils.<br><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Rendre visible l'effet du parallélisme"><a class="Link9" href="#Dupliquer un processus">Rendre visible l'effet du parallélisme</a></h2><br>Pour rendre visible l'effet du parallélisme entre le processus parent et le processus fils, on fait appel à la fonction <b>sleep</b>. L'appel à cette fonction au sein de chaque processus faire des pauses système en <b>seconde</b>.<br><br>Nous pouvons fait appel aussi à la fonction <b>usleep </b>qui permet de faire des pauses système en <b>microseconde</b>.<br><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Programme de test"><a class="Link9" href="#Dupliquer un processus">Programme de test</a></h2><br>Le programme de test suit la procédure suivante :<br><br>$\checkmark$ On duplique le processus (<b>fork</b>)<br>$\checkmark$ On récupère la valeur de retour<br>$\checkmark$ Si la valeur de retour vaut 0<br>$\checkmark$ Il s'agit du processus fils<br>$\checkmark$ Si la valeur de retour est différent de 0<br>$\checkmark$ Il s'agit du processus parent<br>$\checkmark$ Dans le processus fils <br>$\checkmark$ On récupère le PID du processus parent (<b>getppid</b>)<br><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="c_cpp">//===============================================
static void GTestSysUnix_Fork(int argc, char** argv) {
    GDebug()-&gt;Write(2, 3, __FUNCTION__, 3, "()", _EOA_);
    pid_t lPid;
    int lCount = 0;
    do {
        lPid = fork();
    } while((lPid == -1) && (errno == EAGAIN));
    if(lPid == 0) GTestSysUnix_OnFork(0);
    else GTestSysUnix_OnFork2(lPid);
}
//===============================================</xmp></pre></div><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Programme du processus fils"><a class="Link9" href="#Dupliquer un processus">Programme du processus fils</a></h2><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="c_cpp">//===============================================
static void GTestSysUnix_OnFork(void* params) {
    GDebug()-&gt;Write(2, 3, __FUNCTION__, 3, "()", _EOA_);
    pid_t lPid = getpid();
    pid_t lPpid = getppid();
    GDebug()-&gt;Write(2, 30, -30, "Process fils : lPid : ", 1, lPid, _EOA_);
    GDebug()-&gt;Write(2, 30, -30, "Process fils : lPpid : ", 1, lPpid, _EOA_);
    exit(0);
}
//===============================================</xmp></pre></div><br><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Programme du processus parant"><a class="Link9" href="#Dupliquer un processus">Programme du processus parant</a></h2><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="c_cpp">//===============================================
static void GTestSysUnix_OnFork2(void* params) {
    GDebug()-&gt;Write(2, 3, __FUNCTION__, 3, "()", _EOA_);
    pid_t lPid = getpid();
    pid_t lPpid = getppid();
    pid_t lPidFils = (pid_t)params;
    GDebug()-&gt;Write(2, 30, -30, "Process fils : lPid : ", 1, lPid, _EOA_);
    GDebug()-&gt;Write(2, 30, -30, "Process fils : lPpid : ", 1, lPpid, _EOA_);
    GDebug()-&gt;Write(2, 30, -30, "Process fils : lPidFils : ", 1, lPidFils, _EOA_);
    wait(0);
}
//===============================================</xmp></pre></div><br><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Résultat"><a class="Link9" href="#Dupliquer un processus">Résultat</a></h2><br><div class="Img3 GImage"><img src="img/fork.png" alt="img/fork.png"></div><br><h2 class="Title7 GTitle2" id="Dupliquer un processus-Observations"><a class="Link9" href="#Dupliquer un processus">Observations</a></h2><br><h3 class="Title8 GTitle3">Observations sur le processus parent</h3><br>Le processus parent&nbsp; affiche son PID<br><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="sh">Process parent : lPid :       21671</xmp></pre></div><br>Le processus fils affiche le PID de son parent<br><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="sh">Process fils : lPpid :        21671</xmp></pre></div><br>Dans les 2 cas :<br><br>$\checkmark$ Le PID est le même<br>$\checkmark$ Il s'agit du même processus<br>$\checkmark$ C'est le processus parent et son PID est 21671<br><br><h3 class="Title8 GTitle3">Observations sur le processus fils</h3><br>Le processus parent  affiche le PID de son fils<br><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="sh">Process parent : lPidFils :   21674</xmp></pre></div><br>Le processus fils affiche son PID<br><br><div class="GCode1"><pre class="Code2"><xmp class="AceCode" data-mode="sh">Process fils : lPid :         21674</xmp></pre></div><br>Dans les 2 cas :<br><br>$\checkmark$ Le PID est le même<br>$\checkmark$ Il s'agit du même processus<br>$\checkmark$ C'est le processus fils et son PID est 21674<br><br></div></div></div></div><br><div class="Content2 GTitle1"><div class="MainBlock2"><div class="Content"><h1 class="Title2 Center" id="Voir Aussi"><a class="Link3" href="#">Voir Aussi</a></h1><div class="Body3">Dans cette même catégorie, vous pouvez consulter aussi :<br><br><span class="GColor1" style="color:lime;">Programmation en C</span><br><br><div class="Content0 GList1"><div class="Body0" id="Loader_1594465560074"><div class="Row26">List 1 &gt; C &gt; basics</div></div><script>loadList1("Loader_1594465560074","C","basics");</script></div><br><span class="GColor1" style="color:lime;">Programmation avancée en C</span><br><br><div class="Content0 GList1"><div class="Body0" id="Loader_1594465591551"><div class="Row26">List 1 &gt; C &gt; advanced</div></div><script>loadList1("Loader_1594465591551","C","advanced");</script></div><br></div></div></div></div><br>