//===============================================
#include "GMoviePlayer.h"
#include "ui_GMoviePlayer.h"
#include "GVideo.h"
//===============================================
GMoviePlayer::GMoviePlayer(QWidget* parent) :
    QWidget(parent), ui(new Ui::GMoviePlayer) {
    ui->setupUi(this);
}
//===============================================
GMoviePlayer::~GMoviePlayer() {
    delete ui;
}
//===============================================
bool GMoviePlayer::open(const string& file) {
    cv::Mat lImg;
    QImage lQImg;
    GVideo::Instance()->load(file, m_cap);
    GVideo::Instance()->image(m_cap, lImg);
    lQImg = QImage(QSize(m_cv_img.cols, m_cv_img.rows ), QImage::Format_RGB888);
    ui.frame->setMinimumSize( m_qt_img.width(), m_qt_img.height() );
    ui.frame->setMaximumSize( m_qt_img.width(), m_qt_img.height() );
    _copyImage();
    m_timer = new QTimer( this );
    connect(
                m_timer,
                SIGNAL( timeout() ),
                this,
                SLOT( nextFrame() )
                );
    m_timer->start( 1000. / m_cap.get( cv::CAP_PROP_FPS ) );
    return true;
}
//===============================================
void GMoviePlayer::nextFrame() {
    if( !m_cap.isOpened() ) return;
    m_cap.read( m_cv_img );
    _copyImage();
    update();
}
//===============================================
void GMoviePlayer::paintEvent(QPaintEvent* event) {
    QPainter lPainter(this);
    lPainter.drawImage(QPoint(ui->m_image->x(), ui->m_image->y()), m_qimg);
}
//===============================================
void GMoviePlayer::copyImage(const cv::Mat &img, QImage& qimg) {
    cv::Mat lImg(cv::Size(qimg.width(), qimg.height()),CV_8UC3, qimg.bits());
    cv::cvtColor(img, lImg, CV_BGR2RGB);
}
//===============================================
